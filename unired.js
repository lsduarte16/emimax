// Generated by Selenium IDE
const axios = require('axios');
const { Builder, By } = require('selenium-webdriver');
const fs = require('fs');

// Función para leer el archivo JSON de forma asíncrona
function leerRuts(callback) {
  fs.readFile('ruts.json', (err, data) => {
    if (err) {
      console.error('Error al leer el archivo JSON:', err);
      callback([]);
      return;
    }
    try {
      const ruts = JSON.parse(data).rut; // Extrae solo el array de RUTs
      console.log('Datos leídos del archivo JSON:', ruts);
      callback(ruts);
    } catch (error) {
      console.error('Error al parsear el JSON:', error);
      callback([]);
    }
  });
}

async function ejecutarTest(ruts) {
  console.log('Tipo de datos de ruts:', typeof ruts);
  let resultados = [];

  // Verificar si ruts es un array antes de intentar iterar sobre él
  if (!Array.isArray(ruts)) {
    console.error('Error: ruts no es un array');
    return resultados; // Devolver un array vacío si ruts no es un array
  }

  for (let rut of ruts) {
      console.log(rut)
      let result = await ejecutarTestParaRut(rut);
      resultados.push(result);
  }

  return resultados;
  
}

// Función para ejecutar el test para un RUT específico
async function ejecutarTestParaRut(rut) {
  let driver = await new Builder().forBrowser('chrome').build();

  try {
    await driver.get("https://www.unired.cl/")
    await driver.manage().window().setRect({ width: 1080, height: 1057 })
    {
      const element = await driver.findElement(By.css(".contenedor-buscador > .ng-star-inserted"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    {
      const element = await driver.findElement(By.css(".input-container > .ng-untouched"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    await driver.findElement(By.css(".input-container > .ng-untouched")).click()
    await driver.findElement(By.css(".input-container > .ng-untouched")).sendKeys("wo")
    await driver.findElement(By.linkText("WOM MOVIL ( Telefonía Celular )")).click()
    {
      const element = await driver.findElement(By.css(".contenedor-buscador"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    await driver.findElement(By.id("ValorIdentificador")).click()
    await driver.findElement(By.id("ValorIdentificador")).click()

    console.log("RUT recibido:", rut);
    await driver.findElement(By.id("ValorIdentificador")).sendKeys(rut)
    await driver.findElement(By.css(".wrap-form-row > button")).click()

    // Esperar 10 segundos para que se carguen los resultados
    await driver.sleep(10000)

    // Localizar los elementos que contienen el RUT, la fecha de vencimiento y el monto de la deuda
    const rutElement = await driver.findElement(By.css(".empresa-info > span:nth-child(2)"));
    const fechaVencimientoElement = await driver.findElement(By.css(".empresa-info > span:nth-child(4)"));
    const montoDeudaElement = await driver.findElement(By.css(".precio-desktop"));

    // Extraer el texto de los elementos
    const ruttext = await rutElement.getText();
    const fechaVencimiento = await fechaVencimientoElement.getText();
    const montoDeuda = await montoDeudaElement.getText();

    // Imprimir el RUT, la fecha de vencimiento y el monto de la deuda
    console.log("RUT:", ruttext);
    console.log("Fecha de vencimiento:", fechaVencimiento);
    console.log("Monto de la deuda:", montoDeuda);

    // Aquí puedes agregar más acciones si es necesario después de que se carguen los resultados

    return { ruttext, fechaVencimiento, montoDeuda, resultado: 'resultado del test' }; // Puedes modificar el formato del resultado según tus necesidades
  } catch (error) {
      console.error('Error al ejecutar el test para el RUT', rut, ':', error);
      return { rut, resultado: 'error' };
  } finally {
      await driver.quit();
  }
}

// Función para guardar los resultados en un archivo
function guardarResultados(resultados) {
  console.log('Guardando resultados en el archivo...');
  fs.appendFile('resultados.txt', JSON.stringify(resultados, null, 2), (err) => {
      if (err) {
          console.error('Error al guardar los resultados:', err);
      } else {
          console.log('Resultados agregados correctamente en resultados.txt');
      }
  });
}

// Función principal para ejecutar el programa
async function main() {
  // Llamada a la función leerRuts
  leerRuts(async (ruts) => {
    console.log('Datos leídos:', ruts);
    // Llamada a la función ejecutarTest con los datos leídos
    const resultados = await ejecutarTest(ruts);
    console.log('Resultados del test:', resultados);
    // Llamada a la función ejecutarYGuardarParaCadaRut para guardar los resultados
    await ejecutarYGuardarParaCadaRut(resultados, 0);
  });
}

// Función para ejecutar y guardar para cada RUT
async function ejecutarYGuardarParaCadaRut(ruts, index) {
  if (index >= ruts.length) {
    console.log("Se han procesado todos los RUTs.");
    return;
  }

  const resultados = await ejecutarTestParaRut(ruts[index]);
  guardarResultados(resultados, ruts, index);

  // Llamar recursivamente para el siguiente RUT
  await ejecutarYGuardarParaCadaRut(ruts, index + 1);
}

// Ejecutar el programa
main();