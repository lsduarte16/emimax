// Generated by Selenium IDE
const axios = require('axios');
const { Builder, By } = require('selenium-webdriver');
const fs = require('fs');


//funcion para leer rut de la api
async function obtenerRutDesdeAPI() {
  try {
    const response = await axios.post('https://sa-east-1.aws.data.mongodb-api.com/app/emimax-khgfo/endpoint/ruts4ruts');
    const datos = response.data.map(rut => {
      return {
        rut: rut.RUT,
        nombre: rut.NOMBRE_COMPLETO,
        scrMovil: rut.SCR_MOVIL,
        comuna: rut.COMUNA,
        region: rut.Region,
        compañia: rut.Compañía
      };
    });
    console.log('DATOS obtenido de la API:', datos);
    return datos;
  } catch (error) {
    console.error('Error al obtener el RUT desde la API:', error);
    throw error;
  }
}

// Función para ejecutar el test para un RUT específico
async function ejecutarTestParaRut(detalle) {
  const { rut, nombre, scrMovil, comuna, region, compañia} = detalle;
  let driver = await new Builder().forBrowser('chrome').build();

  try {
    await driver.get("https://www.unired.cl/")
    await driver.manage().window().setRect({ width: 1080, height: 1057 })
    {
      const element = await driver.findElement(By.css(".contenedor-buscador > .ng-star-inserted"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    {
      const element = await driver.findElement(By.css(".input-container > .ng-untouched"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    await driver.findElement(By.css(".input-container > .ng-untouched")).click()
    await driver.findElement(By.css(".input-container > .ng-untouched")).sendKeys("wo")
    await driver.findElement(By.linkText("WOM MOVIL ( Telefonía Celular )")).click()
    {
      const element = await driver.findElement(By.css(".contenedor-buscador"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    await driver.sleep(4000)
    await driver.findElement(By.id("ValorIdentificador")).click()
    await driver.findElement(By.id("ValorIdentificador")).click()

    console.log("RUT recibido:", rut);
    await driver.findElement(By.id("ValorIdentificador")).sendKeys(rut)
    await driver.findElement(By.css(".wrap-form-row > button")).click()

    // Esperar 10 segundos para que se carguen los resultados
    await driver.sleep(4000)

    // Localizar los elementos que contienen el RUT, la fecha de vencimiento y el monto de la deuda
    const rutElement = await driver.findElement(By.css(".empresa-info > span:nth-child(2)"));
    const fechaVencimientoElement = await driver.findElement(By.css(".empresa-info > span:nth-child(4)"));
    const montoDeudaElement = await driver.findElement(By.css(".precio-desktop"));

    // Extraer el texto de los elementos
    const ruttext = await rutElement.getText();
    const fechaVencimiento = await fechaVencimientoElement.getText();
    const montoDeuda = await montoDeudaElement.getText();

// Suponiendo que la fecha de vencimiento está en formato "DD-MM-YYYY"
    const fechaVencimientoParts = fechaVencimiento.split('-');
    const fechaVencimientoDate = new Date(fechaVencimientoParts[2], fechaVencimientoParts[1] - 1, fechaVencimientoParts[0]);
    
    // Quitamos puntos
    let rutformat = parseInt(ruttext.replace(/\./g, '').replace('-', ''));
    let montoDeudaNumber = parseFloat(montoDeuda.replace(/\./g, '').replace(',', '.'));

    // Si el monto de la deuda es cero y los elementos slider no están presentes, guardar '--' en monto y fecha
    if (montoDeudaNumber === 0) {
      const sliderElement1 = await driver.findElements(By.css(".deudas:nth-child(1) .slider"));
      const sliderElement2 = await driver.findElements(By.css(".deudas:nth-child(2) .slider"));
    
      // Verificar si los elementos slider están presentes
      if (sliderElement1.length === 0 || sliderElement2.length === 0) {
        console.log("no se registra deuda");
        return { rut, nombre, scrMovil, comuna, region, compañia, fechaVencimiento: '--', montoDeuda: '--', fecreg: new Date(), resultado: 'No registra deuda' };
      }
    
      // Hacer clic en los elementos slider si están presentes
      await sliderElement1[0].click();
      await sliderElement2[0].click();
    
      // Esperar un momento después de hacer clic en los elementos slider
      await driver.sleep(5000);
    
      // Volver a obtener el elemento del monto de la deuda y su texto actualizado
      const updatedMontoDeudaElement = await driver.findElement(By.css(".precio-desktop"));
      const updatedMontoDeuda = await updatedMontoDeudaElement.getText();
      montoDeudaNumber = parseFloat(updatedMontoDeuda.replace(/\./g, '').replace(',', '.'));
    }
 
    // Obtener la fecha y hora actual y establecer la hora, los minutos, los segundos y los milisegundos en cero
    const fechaHoraActual = new Date();
    fechaHoraActual.setHours(0, 0, 0, 0);

    // Convertir la fecha de vencimiento a objeto Date y establecer la hora, los minutos, los segundos y los milisegundos en cero
    fechaVencimientoDate.setHours(0, 0, 0, 0);


    // Determinar si la deuda está vigente o vencida
    let resultadoDeuda = '';
    if (fechaVencimientoDate > fechaHoraActual) {
      resultadoDeuda = 'deuda vigente';
    } else {
      resultadoDeuda = 'deuda vencida';
    }

    // Aquí puedes agregar más acciones si es necesario después de que se carguen los resultados

    return { rut, nombre, scrMovil, comuna, region, compañia, fechaVencimiento: fechaVencimientoDate, montoDeuda: montoDeudaNumber, fecreg: fechaHoraActual, resultado: resultadoDeuda }; // Modifica esto para incluir la fecha de vencimiento y el monto obtenido
  } catch (error) {
      console.error('Error al ejecutar el test para el RUT', rut, ':', error);
      return { rut, nombre, resultado: 'error' };
  } finally {
      await driver.quit();
  }
}

async function guardarResultado(resultado) {
  try {
    const response = await axios.post('https://sa-east-1.aws.data.mongodb-api.com/app/emimax-khgfo/endpoint/result', resultado);
    console.log('Respuesta del servidor:', response.data);
  } catch (error) {
    console.error('Error al guardar el resultado:', error);
    throw error; // Reenviar el error para manejarlo más arriba si es necesario
  }
}

// Función principal para ejecutar el programa
async function main() {
  try {
    while (true) {
      const detallesRut = await obtenerRutDesdeAPI(); // Obtener los detalles de los RUTs desde la API
      for (const detalle of detallesRut) {
        const resultado = await ejecutarTestParaRut(detalle); // Pasar el detalle del RUT
        console.log('Resultado del test:', resultado);
        await guardarResultado(resultado);
      }
      // Esperar un período de tiempo antes de volver a ejecutar el bucle
      //await new Promise(resolve => setTimeout(resolve, 10000)); // Esperar 1 minuto
    }
  } catch (error) {
    console.error('Error en el programa:', error);
  }
}

// Ejecutar el programa
main();