// Generated by Selenium IDE
const axios = require('axios');
const { Builder, By } = require('selenium-webdriver');
const fs = require('fs');

// Función para leer el archivo JSON de forma asíncrona
async function leerRuts() {
  return new Promise((resolve, reject) => {
    fs.readFile('ruts.json', (err, data) => {
      if (err) {
        console.error('Error al leer el archivo JSON:', err);
        reject(err);
        return;
      }
      try {
        const ruts = JSON.parse(data).rut; // Extrae solo el array de RUTs
        //console.log('Datos leídos del archivo JSON:', ruts);
        resolve(ruts);
      } catch (error) {
        console.error('Error al parsear el JSON:', error);
        reject(error);
      }
    });
  });
}

async function ejecutarTest(ruts) {
  //console.log('Tipo de datos de ruts:', typeof ruts);
  let resultados = [];

  for (let rut of ruts) {
    //console.log(rut)
    let result = await ejecutarTestParaRut(rut);
    resultados.push(result);
    await guardarResultado(result);
  }

  return resultados;
}

// Función para ejecutar el test para un RUT específico
async function ejecutarTestParaRut(rut) {
  let driver = await new Builder().forBrowser('chrome').build();

  try {
    await driver.get("https://www.unired.cl/")
    await driver.manage().window().setRect({ width: 1080, height: 1057 })
    {
      const element = await driver.findElement(By.css(".contenedor-buscador > .ng-star-inserted"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    {
      const element = await driver.findElement(By.css(".input-container > .ng-untouched"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    await driver.findElement(By.css(".input-container > .ng-untouched")).click()
    await driver.findElement(By.css(".input-container > .ng-untouched")).sendKeys("wo")
    await driver.findElement(By.linkText("WOM MOVIL ( Telefonía Celular )")).click()
    {
      const element = await driver.findElement(By.css(".contenedor-buscador"))
      await driver.actions({ bridge: true }).move({ origin: element }).perform()
    }
    await driver.findElement(By.id("ValorIdentificador")).click()
    await driver.findElement(By.id("ValorIdentificador")).click()

    console.log("RUT recibido:", rut);
    await driver.findElement(By.id("ValorIdentificador")).sendKeys(rut)
    await driver.findElement(By.css(".wrap-form-row > button")).click()

    // Esperar 10 segundos para que se carguen los resultados
    await driver.sleep(8000)

    // Localizar los elementos que contienen el RUT, la fecha de vencimiento y el monto de la deuda
    const rutElement = await driver.findElement(By.css(".empresa-info > span:nth-child(2)"));
    const fechaVencimientoElement = await driver.findElement(By.css(".empresa-info > span:nth-child(4)"));
    const montoDeudaElement = await driver.findElement(By.css(".precio-desktop"));

    // Extraer el texto de los elementos
    const ruttext = await rutElement.getText();
    const fechaVencimiento = await fechaVencimientoElement.getText();
    const montoDeuda = await montoDeudaElement.getText();
    // Quitamos puntos
    let rutformat = parseInt(ruttext.replace(/\./g, '').replace('-', ''));
    let montoDeudaNumber = parseFloat(montoDeuda.replace(/\./g, '').replace(',', '.'));

    // Si el monto de la deuda es cero, buscar elementos <span> con la clase "slider" y hacer clic en cada uno
    if (montoDeudaNumber === 0) {
      await driver.findElement(By.css(".deudas:nth-child(1) .slider")).click()
      await driver.findElement(By.css(".deudas:nth-child(2) .slider")).click()
      
      // Esperar un momento después de hacer clic en los elementos slider
      await driver.sleep(5000);

       // Volver a obtener el elemento del monto de la deuda y su texto actualizado
       const updatedMontoDeudaElement = await driver.findElement(By.css(".precio-desktop"));
       const updatedMontoDeuda = await updatedMontoDeudaElement.getText();
       montoDeudaNumber = parseFloat(updatedMontoDeuda.replace(/\./g, '').replace(',', '.'));

    }
 
    // Obtener la fecha y hora actual
    const fechaHoraActual = new Date();

    // Imprimir el RUT, la fecha de vencimiento y el monto de la deuda
    console.log("RUT:", rutformat);
    console.log("Fecha de vencimiento:", fechaVencimiento);
    console.log("Monto deuda:", montoDeudaNumber);

    // Aquí puedes agregar más acciones si es necesario después de que se carguen los resultados

    return { rutformat, fechaVencimiento, montoDeudaNumber, fecreg: fechaHoraActual  ,resultado: 'registro ok' }; // Puedes modificar el formato del resultado según tus necesidades
  } catch (error) {
      console.error('Error al ejecutar el test para el RUT', rut, ':', error);
      return { rut, resultado: 'error' };
  } finally {
      await driver.quit();
  }
}

async function guardarResultado(resultado) {
  try {
    const response = await axios.post('https://sa-east-1.aws.data.mongodb-api.com/app/emimax-khgfo/endpoint/result', resultado);
    console.log('Respuesta del servidor:', response.data);
  } catch (error) {
    console.error('Error al guardar el resultado:', error);
    throw error; // Reenviar el error para manejarlo más arriba si es necesario
  }
}

// Función principal para ejecutar el programa
async function main() {
  try {
    const ruts = await leerRuts();
    //console.log('Datos leídos:', ruts);
    const resultados = await ejecutarTest(ruts);
    console.log('Resultados del test:', resultados);
  } catch (error) {
    console.error('Error en el programa:', error);
  }
}

// Ejecutar el programa
main();